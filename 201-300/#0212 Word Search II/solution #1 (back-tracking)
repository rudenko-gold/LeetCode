class Solution {
public:
    bool dfs(vector<vector<char>>& pole, int i, int j, string& word, int pos) {
        if (pos == word.size() - 1 && pole[i][j] == word[pos]) {
            return true;
        } else if (word[pos] == pole[i][j]) {
            bool ans = false;
            used[i][j] = 1;
            if (i - 1 >= 0 && used[i - 1][j] == 0) {
                ans = ans || dfs(pole, i - 1, j, word, pos + 1);
            }
            if (i + 1 < pole.size() && used[i + 1][j] == 0) {
                ans = ans || dfs(pole, i + 1, j, word, pos + 1);
            }
            if (j - 1 >= 0 && used[i][j - 1] == 0) {
                ans = ans || dfs(pole, i, j - 1, word, pos + 1);
            }
            if (j + 1 < pole[i].size() && used[i][j + 1] == 0) {
                ans = ans || dfs(pole, i, j + 1, word, pos + 1);
            }
            used[i][j] = 0;
            
            return ans;
        } else {
            return false;
        }
    }
    
    bool exist(vector<vector<char>>& board, string& word) {
        bool ans = false;
        for (int i = 0; i < board.size(); i++) {
            for (int j = 0; j < board[i].size(); j++) {
                ans = ans || dfs (board, i, j, word, 0);
            }
        }
        
        return ans;
    }
    
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        used.resize(board.size());
        for (int i = 0; i < board.size(); i++) {
            used[i].resize(board[i].size(), 0);
        }
        
        vector<string> ans;
        
        for (int i = 0; i < words.size(); i++) {
            if (exist(board, words[i])) {
                ans.push_back(words[i]);
            }
        }
        
        return ans;
    }
    
    vector<vector<int>> used;
};
