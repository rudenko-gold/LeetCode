class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int freshCnt = 0;
        queue<pair<int, int>> q;
        
        for (int i = 0; i < grid.size(); ++i) {
            for (int j = 0; j < grid[i].size(); ++j) {
                if (grid[i][j] == 1) {
                    freshCnt++;
                } else if (grid[i][j] == 2) {
                    bool check = false;
                    
                    if (i != 0 && grid[i - 1][j] != 2) {
                        check = true;
                    }
                    if (i != grid.size() - 1 && grid[i + 1][j] != 2) {
                        check = true;
                    } 
                    if (j != 0 && grid[i][j - 1] != 2) {
                        check = true;
                    }
                    if (j != grid[i].size() - 1 && grid[i][j + 1] != 2) {
                        check = true;
                    }
                    if (check) {
                        q.push(make_pair(i, j));
                    }
                }
            }
        }
        
        int ans = 0;
        while (q.size() > 0) {
            if (freshCnt == 0) {
                break;
            }
            int sz = q.size();
            for (int t = 0; t < sz; ++t) {
                pair<int, int> p = q.front();
                q.pop();
                
                int i = p.first;
                int j = p.second;
                
                if (i != 0 && grid[i - 1][j] == 1) {
                    grid[i - 1][j] = 2;
                    q.push(make_pair(i - 1, j));
                    freshCnt--;
                }
                if (i != grid.size() - 1 && grid[i + 1][j] == 1) {
                    grid[i + 1][j] = 2;
                    q.push(make_pair(i + 1, j));
                    freshCnt--;
                } 
                if (j != 0 && grid[i][j - 1] == 1) {
                    grid[i][j - 1] = 2;
                    q.push(make_pair(i, j - 1));
                    freshCnt--;
                }
                if (j != grid[i].size() - 1 && grid[i][j + 1] == 1) {
                    grid[i][j + 1] = 2;
                    q.push(make_pair(i, j + 1));
                    freshCnt--;
                }
            }
            ans++;
        }
        
        if (freshCnt != 0) {
            return -1;
        } else {
            return ans;
        }
    }
};
